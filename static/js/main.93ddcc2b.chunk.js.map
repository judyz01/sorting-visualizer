{"version":3,"sources":["Algos/algos.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeAnimations","array","animations","length","auxArray","slice","mergeHelper","mainArray","startIdx","endIdx","midIdx","Math","floor","i","k","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","onClick","mergeSort","React","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.93ddcc2b.chunk.js","sourcesContent":["export function getMergeAnimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) return array;\n\n  const auxArray = array.slice();\n  mergeHelper(array, 0, array.length - 1, auxArray, animations);\n  return animations;\n}\n\nfunction mergeHelper(mainArray, startIdx, endIdx, auxArray, animations) {\n  if (startIdx === endIdx) return;\n\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeHelper(auxArray, startIdx, midIdx, mainArray, animations);\n  mergeHelper(auxArray, midIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, animations) {\n  let i = startIdx;\n  let k = startIdx;\n  let j = midIdx + 1;\n\n  while (i <= midIdx && j <= endIdx) {\n    animations.push([i,j]);\n    animations.push([i,j]);\n\n    if (auxArray[i] <= auxArray[j]) {\n      animations.push([k, auxArray[i]]);\n      mainArray[k++] = auxArray[i++];\n    } else {\n      animations.push([k, auxArray[j]]);\n      mainArray[k++] = auxArray[j++];\n    }\n  }\n\n  while (i <= midIdx) {\n    animations.push([i,i]);\n    animations.push([i,i]);\n\n    animations.push([k, auxArray[i]]);\n    mainArray[k++] = auxArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j,j]);\n    animations.push([j,j]);\n    \n    animations.push([k, auxArray[j]]);\n    mainArray[k++] = auxArray[j++];\n  }\n}","import React from 'react';\nimport {getMergeAnimations} from '../Algos/algos.js';\nimport './SortingVisualizer.css';\n\n// some global constants\nconst ANIMATION_SPEED_MS = 3;\nconst NUMBER_OF_BARS = 180;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'purple';\n\nexport class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  //generates new array between values set inclusive\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_BARS; i++) {\n      array.push(randomNum(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // this is a later problem, will implement when I review my sorting algos :) \n  // quickSort() {\n\n  // }\n\n  // heapSort() {\n\n  // }\n\n  // bubbleSort() {\n\n  // }\n        \n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n              }}>\n          </div>\n        ))}\n        <button onClick={() => this.resetArray()}> New Array </button>\n        <button onClick={() => this.mergeSort()}> Merge Sort </button>\n\n        {/* <button onClick={() => this.quickSort()}> Quick Sort </button>\n        <button onClick={() => this.heapSort()}> Heap Sort </button>\n        <button onClick={() => this.bubbleSort()}> Bubble Sort </button> */}\n        \n      </div>\n    );\n  }\n}\n\n// sets a random integer for the array value\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// for debugging\n// function to check if original and copied arrays are the same\n// function equalArrays(first_array, second_array) {\n//   if (first_array.length !== second_array.length) return false;\n//   for (let i = 0; i < first_array.length; i++) {\n//     if (first_array[i] !== second_array[i]) {\n//       return false;\n//     }\n//   }\n\n//   return true;\n// }\n\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}