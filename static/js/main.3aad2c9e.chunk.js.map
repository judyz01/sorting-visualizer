{"version":3,"sources":["Algos/mergesort.js","Algos/quicksort.js","Algos/bubblesort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeAnimations","array","animations","length","auxArray","slice","mergeHelper","mainArray","startIdx","endIdx","midIdx","Math","floor","i","k","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","min","max","random","swap","lessTailIndex","partitionArray","firstIndex","secondIndex","temp","getBubbleSortAnimations","iters","swapped","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","SortingVisualizer","props","state","this","resetArray","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","className","map","value","idx","key","onClick","mergeSort","React","Component","App","ReactDOM","render","getElementById"],"mappings":"uPAAO,SAASA,EAAmBC,GACjC,IAAMC,EAAa,GAEnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAE9B,IAAMG,EAAWH,EAAMI,QAEvB,OAGF,SAASC,EAAYC,EAAWC,EAAUC,EAAQL,EAAUF,GAC1D,GAAIM,IAAaC,EAAQ,OAEzB,IAAMC,EAASC,KAAKC,OAAOJ,EAAWC,GAAU,GAChDH,EAAYF,EAAUI,EAAUE,EAAQH,EAAWL,GACnDI,EAAYF,EAAUM,EAAS,EAAGD,EAAQF,EAAWL,GAIvD,SAAiBK,EAAWC,EAAUE,EAAQD,EAAQL,EAAUF,GAC9D,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAS,EAEjB,KAAOG,GAAKH,GAAUK,GAAKN,GACzBP,EAAWc,KAAK,CAACH,EAAEE,IACnBb,EAAWc,KAAK,CAACH,EAAEE,IAEfX,EAASS,IAAMT,EAASW,IAC1Bb,EAAWc,KAAK,CAACF,EAAGV,EAASS,KAC7BN,EAAUO,KAAOV,EAASS,OAE1BX,EAAWc,KAAK,CAACF,EAAGV,EAASW,KAC7BR,EAAUO,KAAOV,EAASW,MAI9B,KAAOF,GAAKH,GACVR,EAAWc,KAAK,CAACH,EAAEA,IACnBX,EAAWc,KAAK,CAACH,EAAEA,IAEnBX,EAAWc,KAAK,CAACF,EAAGV,EAASS,KAC7BN,EAAUO,KAAOV,EAASS,KAG5B,KAAOE,GAAKN,GACVP,EAAWc,KAAK,CAACD,EAAEA,IACnBb,EAAWc,KAAK,CAACD,EAAEA,IAEnBb,EAAWc,KAAK,CAACF,EAAGV,EAASW,KAC7BR,EAAUO,KAAOV,EAASW,KAlC5BE,CAAQV,EAAWC,EAAUE,EAAQD,EAAQL,EAAUF,GAVvDI,CAAYL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAUF,GAC3CA,ECPF,SAASgB,EAAuBjB,GACrC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,QAI3B,OAGF,SAASe,EAAUD,EAAgBE,EAAYC,EAAUpB,GACvD,IAAIqB,EACAF,EAAaC,IACbC,EAMN,SAAwBJ,EAAgBE,EAAYC,EAAUpB,GAC5D,IAAIqB,GAgDyBC,EAhDUH,EAgDLI,EAhDiBH,EAkD5CX,KAAKC,MAAMD,KAAKe,UAAYD,EAAMD,EAAM,GAAKA,IAFtD,IAA+BA,EAAKC,EA/ClCvB,EAAWc,KAAK,CAAC,eAAgBO,EAAYD,IAC7CpB,EAAWc,KAAK,CAAC,OAAQO,EAAYJ,EAAeG,KACpDpB,EAAWc,KAAK,CAAC,OAAQM,EAAUH,EAAeI,KAClDrB,EAAWc,KAAK,CAAC,eAAgBO,EAAYD,IAC7CK,EAAKR,EAAgBI,EAAYD,GAIjC,IAFA,IAAIM,EAAgBP,EAEZR,EAAIQ,EAAYR,EAAIS,IAAYT,EACpCX,EAAWc,KAAK,CAAC,eAAgBH,EAAGS,IACpCpB,EAAWc,KAAK,CAAC,eAAgBH,EAAGS,IACjCH,EAAeN,IAAMM,EAAeG,KACnCpB,EAAWc,KAAK,CAAC,eAAgBH,EAAGe,IACpC1B,EAAWc,KAAK,CAAC,OAAQH,EAAGM,EAAeS,KAC3C1B,EAAWc,KAAK,CAAC,OAAQY,EAAeT,EAAeN,KACvDX,EAAWc,KAAK,CAAC,eAAgBH,EAAGe,IACpCD,EAAKR,EAAgBN,EAAGe,GACxBA,KASR,OANA1B,EAAWc,KAAK,CAAC,eAAgBY,EAAeN,IAChDpB,EAAWc,KAAK,CAAC,OAAQM,EAAUH,EAAeS,KAClD1B,EAAWc,KAAK,CAAC,OAAQY,EAAeT,EAAeG,KACvDpB,EAAWc,KAAK,CAAC,eAAgBY,EAAeN,IAEhDK,EAAKR,EAAgBS,EAAeN,GAC7BM,EAlCUC,CAAeV,EAAgBE,EAAYC,EAAUpB,GAClEkB,EAAUD,EAAgBE,EAAYE,EAAa,EAAGrB,GACtDkB,EAAUD,EAAgBI,EAAa,EAAGD,EAAUpB,IAXxDkB,CAAUD,EAAgB,EAAGA,EAAehB,OAAS,EAAGD,GAGjD,CAACA,EADRD,EAAQkB,GA4CV,SAASQ,EAAKR,EAAgBW,EAAYC,GACxC,IAAIC,EAAOb,EAAeW,GAC1BX,EAAeW,GAAcX,EAAeY,GAC5CZ,EAAeY,GAAeC,ECpDzB,SAASC,EAAwBhC,GACtC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,SAQ7B,SAAoBc,EAAgBjB,GAClC,IACIgC,EADMf,EAAehB,OACT,EAChB,KAAM+B,EAAQ,GAAG,CAEb,IADA,IAAIC,GAAU,EACNtB,EAAI,EAAGA,EAAIqB,IAASrB,EACxBX,EAAWc,KAAK,CAAC,eAAgBH,EAAGA,EAAI,IACxCX,EAAWc,KAAK,CAAC,eAAgBH,EAAGA,EAAI,IACrCM,EAAeN,GAAKM,EAAeN,EAAI,KACtCsB,GAAU,EACVjC,EAAWc,KAAK,CAAC,OAAQH,EAAGM,EAAeN,EAAI,KAC/CX,EAAWc,KAAK,CAAC,OAAQH,EAAI,EAAGM,EAAeN,KAC/Cc,EAAKR,EAAgBN,EAAGA,EAAI,IAGpC,IAAe,IAAZsB,EAAmB,MACtBD,KAvBJE,CAAWjB,EAAgBjB,GAC3B,IAAMmC,EAAwBpC,EAAMI,QAAQiC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBA+Bd,SAAwBC,EAAYC,GAClC,GAAID,EAAWxC,SAAWyC,EAAYzC,OAClC,OAAO,EAEX,IAAK,IAAIU,EAAI,EAAGA,EAAI8B,EAAWxC,OAAQU,IACrC,GAAI8B,EAAW9B,KAAO+B,EAAY/B,GAChC,OAAO,EAGX,OAAO,EAxC8BgC,CAAeR,EAAuBlB,IAEpE,CAACjB,EADRD,EAAQkB,GAwBV,SAASQ,EAAKR,EAAgBW,EAAYC,GACxC,IAAIC,EAAOb,EAAeW,GAC1BX,EAAeW,GAAcX,EAAeY,GAC5CZ,EAAeY,GAAeC,ECsIjBc,MA3Jf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACX/C,MAAO,IAJQ,EADrB,gEAUIgD,KAAKC,eAVT,mCAgBI,IADA,IA2He1B,EAAKC,EA3HdxB,EAAQ,GACLY,EAAI,EAAGA,EApBG,IAoBiBA,IAClCZ,EAAMe,MAyHOQ,EAzHQ,EAyHHC,EAzHM,IA0HrBd,KAAKC,MAAMD,KAAKe,UAAYD,EAAMD,EAAM,GAAKA,KAxHlDyB,KAAKE,SAAS,CAAClD,YAnBnB,kCAwBI,IADA,IAAMC,EAAaF,EAAmBiD,KAAKD,MAAM/C,OADvC,WAEDY,GACP,IAAMuC,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBzC,EAAI,IAAM,EAEb,CAAC,IAAD,cACcX,EAAWW,GADzB,GACV0C,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQ/C,EAAI,IAAM,EAlCR,SADF,YAqCdgD,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAzCb,EA0ChB/C,QAEHgD,YAAW,WAAO,IAAD,cACgB3D,EAAWW,GAD3B,GACR0C,EADQ,KACGQ,EADH,KAEKX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QA/CiB,EAgDhBlD,IAnBEA,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAM,EAApCA,KAxBb,kCAkDI,IAFW,IAAD,EACqBK,EAAuB+B,KAAKD,MAAM/C,OADvD,mBACHC,EADG,KAEDW,GAFC,KAEG,GAAGA,EAAIX,EAAWC,OAAQU,IAAK,CAC1C,IAAMoD,EAAqC,iBAArB/D,EAAWW,GAAG,IAA8C,iBAArBX,EAAWW,GAAG,GACrEuC,EAAYC,SAASC,uBAAuB,aAClD,IAAqB,IAAlBW,GAAyB,WACxB,IAAML,EAA8B,iBAArB1D,EAAWW,GAAG,GAxDf,SADF,YAwDW,cAEyBX,EAAWW,GAFpC,GAEHqD,GAFG,WAEUC,EAFV,KAGjBV,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAjEjB,EAkEf/C,GARsB,QAUvB,6CACmCX,EAAWW,GAD9C,GACYuD,GADZ,WACsBL,EADtB,KAED,IAAkB,IAAdK,EACA,iBAEJ,IAAMC,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QA3Ea,EA4EflD,GARD,GAGG,YAlEd,mCA8EI,IAFY,IAAD,EACoBoB,EAAwBgB,KAAKD,MAAM/C,OADvD,mBACJC,EADI,KAEFW,GAFE,KAEE,GAAGA,EAAIX,EAAWC,OAAQU,IAAK,CAC1C,IAAMoD,EAAqC,iBAArB/D,EAAWW,GAAG,IAA8C,iBAArBX,EAAWW,GAAG,GACrEuC,EAAYC,SAASC,uBAAuB,aAClD,IAAqB,IAAlBW,GAAyB,WACxB,IAAML,EAA8B,iBAArB1D,EAAWW,GAAG,GApFf,SADF,YAoFW,cAEyBX,EAAWW,GAFpC,GAEHqD,GAFG,WAEUC,EAFV,KAGjBV,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA7FjB,EA8Ff/C,GARsB,QAUvB,6CACmCX,EAAWW,GAD9C,GACYuD,GADZ,WACsBL,EADtB,KAED,IAAkB,IAAdK,EACA,iBAEJ,IAAMC,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QAvGa,EAwGflD,GARD,GAGG,YA9Fd,+BA6GY,IAAD,OACAZ,EAASgD,KAAKD,MAAd/C,MAEP,OACE,yBAAKqE,UAAU,mBACZrE,EAAMsE,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEH,UAAU,YACVI,IAAKD,EACLf,MAAO,CACLI,gBA1HQ,YA2HRE,OAAO,GAAD,OAAKQ,EAAL,YAIZ,4BAAQG,QAAS,kBAAM,EAAKzB,eAA5B,eACA,4BAAQyB,QAAS,kBAAM,EAAKvD,cAA5B,gBACA,4BAAQuD,QAAS,kBAAM,EAAKC,cAA5B,gBACA,4BAAQD,QAAS,kBAAM,EAAKvC,eAA5B,sBA/HR,GAAuCyC,IAAMC,W,MCA9BC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCFNU,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,U","file":"static/js/main.3aad2c9e.chunk.js","sourcesContent":["export function getMergeAnimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) return array;\n\n  const auxArray = array.slice();\n  mergeHelper(array, 0, array.length - 1, auxArray, animations);\n  return animations;\n}\n\nfunction mergeHelper(mainArray, startIdx, endIdx, auxArray, animations) {\n  if (startIdx === endIdx) return;\n\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeHelper(auxArray, startIdx, midIdx, mainArray, animations);\n  mergeHelper(auxArray, midIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, animations) {\n  let i = startIdx;\n  let k = startIdx;\n  let j = midIdx + 1;\n\n  while (i <= midIdx && j <= endIdx) {\n    animations.push([i,j]);\n    animations.push([i,j]);\n\n    if (auxArray[i] <= auxArray[j]) {\n      animations.push([k, auxArray[i]]);\n      mainArray[k++] = auxArray[i++];\n    } else {\n      animations.push([k, auxArray[j]]);\n      mainArray[k++] = auxArray[j++];\n    }\n  }\n\n  while (i <= midIdx) {\n    animations.push([i,i]);\n    animations.push([i,i]);\n\n    animations.push([k, auxArray[i]]);\n    mainArray[k++] = auxArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j,j]);\n    animations.push([j,j]);\n    \n    animations.push([k, auxArray[j]]);\n    mainArray[k++] = auxArray[j++];\n  }\n}","export function getQuickSortAnimations(array) {\n  let animations  = [];\n  let auxillaryArray = array.slice();\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex;\n  if (startIndex < endIndex) {\n      pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n      quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n      quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n  animations.push([\"comparision1\", pivotIndex, endIndex]);\n  animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n  animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n  animations.push([\"comparision2\", pivotIndex, endIndex]);\n  swap(auxillaryArray, pivotIndex, endIndex);\n\n  let lessTailIndex = startIndex;\n\n  for(let i = startIndex; i < endIndex; ++i) {\n      animations.push([\"comparision1\", i, endIndex]);\n      animations.push([\"comparision2\", i, endIndex]);\n      if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n          animations.push([\"comparision1\", i, lessTailIndex]);\n          animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n          animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n          animations.push([\"comparision2\", i, lessTailIndex]);\n          swap(auxillaryArray, i, lessTailIndex);\n          lessTailIndex++;\n      }\n  }\n  animations.push([\"comparision1\", lessTailIndex, endIndex]);\n  animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n  animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n  animations.push([\"comparision2\", lessTailIndex, endIndex]);\n  \n  swap(auxillaryArray, lessTailIndex, endIndex);\n  return lessTailIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\n// function arraysAreEqual(firstArray, secondArray) {\n//   if (firstArray.length !== secondArray.length) {\n//       return false;\n//   }\n//   for (let i = 0; i < firstArray.length; i++) {\n//     if (firstArray[i] !== secondArray[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getBubbleSortAnimations(array) {\n  let animations  = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n  let iters = N - 1;\n  while(iters > 0) {\n      let swapped = false;\n      for(let i = 0; i < iters; ++i) {\n          animations.push([\"comparision1\", i, i + 1]);\n          animations.push([\"comparision2\", i, i + 1]);\n          if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n              swapped = true;\n              animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n              animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n              swap(auxillaryArray, i, i + 1);\n          }\n      }\n      if(swapped === false) break;\n      iters--;\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n      return false;\n  }\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeAnimations} from '../Algos/mergesort';\nimport {getQuickSortAnimations} from '../Algos/quicksort';\nimport {getBubbleSortAnimations} from '../Algos/bubblesort';\n\n// some global constants\nconst ANIMATION_SPEED_MS = 3;\nconst NUMBER_OF_BARS = 180;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'purple';\n\nexport class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  //generates new array between values set inclusive\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_BARS; i++) {\n      array.push(randomNum(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if(isColorChange === true) {\n          const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n          const [comparision, barOneIndex, barTwoIndex] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n          },i * ANIMATION_SPEED_MS);\n      }\n      else {\n          const [swap, barIndex, newHeight] = animations[i];\n          if (barIndex === -1) {\n              continue;\n          }\n          const barStyle = arrayBars[barIndex].style;\n          setTimeout(() => {\n              barStyle.height = `${newHeight}px`;\n          },i * ANIMATION_SPEED_MS);  \n      }        \n    }\n  }\n\n  bubbleSort() {\n    const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if(isColorChange === true) {\n          const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n          const [comparision, barOneIndex, barTwoIndex] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n          },i * ANIMATION_SPEED_MS);\n      }\n      else {\n          const [swap, barIndex, newHeight] = animations[i];\n          if (barIndex === -1) {\n              continue;\n          }\n          const barStyle = arrayBars[barIndex].style;\n          setTimeout(() => {\n              barStyle.height = `${newHeight}px`;\n          },i * ANIMATION_SPEED_MS);  \n      }\n    }\n  }\n\n  // heapSort() {\n\n  // }\n\n        \n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n              }}>\n          </div>\n        ))}\n        <button onClick={() => this.resetArray()}> New Array </button>\n        <button onClick={() => this.quickSort()}> Quick Sort </button>\n        <button onClick={() => this.mergeSort()}> Merge Sort </button>\n        <button onClick={() => this.bubbleSort()}> Bubble Sort </button>\n\n        {/*\n        <button onClick={() => this.heapSort()}> Heap Sort </button>*/}\n\n      </div>\n    );\n  }\n}\n\n// sets a random integer for the array value\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// for debugging\n// function to check if original and copied arrays are the same\n// function equalArrays(first_array, second_array) {\n//   if (first_array.length !== second_array.length) return false;\n//   for (let i = 0; i < first_array.length; i++) {\n//     if (first_array[i] !== second_array[i]) {\n//       return false;\n//     }\n//   }\n\n//   return true;\n// }\n\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}